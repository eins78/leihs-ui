jobs:
  lint:
    name: Lint
    run_when:
      any branch is pushed: { type: branch, include_match: ^.*$ }
    include: cider-ci/task_defaults.yml
    tasks:
      lint:
        include: cider-ci/lint_task-component.yml

  build:
    name: Build
    run_when:
      any branch is pushed: { type: branch, include_match: ^.*$ }
    include: cider-ci/task_defaults.yml
    tasks:
      build:
        include: cider-ci/build_task-component.yml

  test:
    name: Test
    run_when:
      any branch is pushed: { type: branch, include_match: ^.*$ }
    include: cider-ci/task_defaults.yml
    tasks:
      build-and-test:
        include: cider-ci/build-and-test_task-component.yml

  all-ok:
    name: 'All Tests OK'
    depends_on: &ALLOK_DEP
      test passed: { type: job, job_key: test, states: [passed] }
    run_when: *ALLOK_DEP
    task: 'echo ALL OK'

  good-to-merge:
    name: 'âš‘ Good To Merge'
    depends_on: &MERGE_DEP
      all passed: { type: job, job_key: all-ok, states: [passed] }
    run_when: *MERGE_DEP
    tasks:
      git-linear-history:
        name: 'git: check linear history'
        environment_variables: { GIT_LINEAR_HISTORY_CHECK_START_SHA: '73b89f9eb8cee416f36d40cf252ad710f620e4b8' }
        scripts:
          test:
            body: |
              #!/usr/bin/env bash
              set -eux
              # no merges between GIT_LINEAR_HISTORY_CHECK_START_SHA and the current commit,
              test -z $(git rev-list --merges ${GIT_LINEAR_HISTORY_CHECK_START_SHA}..HEAD)

      git-branch-current:
        name: 'git: tree contains latest commit from origin/master AND origin/next'
        aggregate_state: satisfy-last # relies on external state!
        scripts:
          test:
            body: |
              #!/usr/bin/env bash
              set -eu

              # check if your tree still contains the current commit from master
              git fetch --all -q 1>&2

              git rev-list --children HEAD | grep -q "$(git rev-parse origin/master)"

              git rev-list --children HEAD | grep -q "$(git rev-parse origin/next)"

              echo "OK"
